name: Deploy to ApigeeX Non-Prod
on:
  workflow_dispatch:
    inputs:
      apigeex-environment:
        description: 'Environment'
        required: true
        default: 'dev'
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: 'repo'
      - name: Download latest apigeecli
        run: |
          # Determine the latest apigeecli version by version number ignoring alpha, beta, and rc versions.
          if [ "${APIGEECLI_VERSION}" = "" ] ; then
            APIGEECLI_VERSION="$(curl -sL https://github.com/apigee/apigeecli/releases/latest | \
                            grep -i release | grep -o 'v[0-9].[0-9][0-9][0-9]' | tail -1)"
            APIGEECLI_VERSION="${APIGEECLI_VERSION##*/}"
          fi
          wget "https://github.com/apigee/apigeecli/releases/download/${APIGEECLI_VERSION}/apigeecli_${APIGEECLI_VERSION}_Linux_x86_64.zip" -O temp.zip
          unzip temp.zip
          rm temp.zip
          mv apigeecli_${APIGEECLI_VERSION}_Linux_x86_64/apigeecli .
          rm -r apigeecli_${APIGEECLI_VERSION}_Linux_x86_64
      - name: Authenticate and set ApigeeX Organization
        run: | 
          echo "${SERVICE_ACCOUNT_TOKEN}" > auth.json
          ./apigeecli token cache -a auth.json
          ./apigeecli prefs set -o amer-api-partner38
        env: 
          SERVICE_ACCOUNT_TOKEN: ${{secrets.GCP_CREDENTIALS_APIGEEX_NONPROD_DEPLOYER}}
      - name: Create/Update API Proxy
        run: |
          repoName=${{github.event.repository.name}}
          emptyString=""
          proxyName=$(echo "${repoName/API-/"$emptyString"}")
          ./apigeecli apis create bundle -f repo/apiproxy -n ${proxyName}
          ./apigeecli apis deploy -e ${{github.event.inputs.apigeex-environment}} -n ${proxyName} --wait -r
